
# 1 "source/keeloq.c"

# 13 "source/type.h"
typedef unsigned char u8;
typedef unsigned short u16;

typedef unsigned char U08ET;
typedef unsigned short U16ET;
typedef void VODET;

# 11 "source/keeloq.h"
u8* ENcrypt(u8 *source, u8* _key);
u8* DEcrypt(u8 *source, u8* _key);
u8 getBit( u8 *source, u16 n);
u8* RRC(u8 *source, u8 c, u8 n);
u8* RLC(u8 *source, u8 c, u8 n);
u8* _keeloq_encrypt(u8 *source, u8 EncryptMode);
u8* LRN_MKEY(u8 *source, u8 *new_key);
u8* _keeloq_decrypt(u8 *source);

# 8 "source/keeloq.c"
const u8 NLF[2][2][2][2][2]={0,1,1,1,0,1,0,0,
0,0,1,0,1,1,1,0,
0,0,1,1,1,0,1,0,
0,1,0,1,1,1,0,0};

# 53
u8* ENcrypt(u8 *source, u8* _key)
{
u16 i;
u8 c, nlf, y16, y0, k, result;
c = 0;
for (i = 0; i < 528; i++)
{
nlf = NLF[getBit(source, 31)][getBit(source, 26)][getBit(source, 20)][getBit(source, 9)][getBit(source, 1)];
y16 = getBit(source, 16);
y0 = getBit(source, 0);
k = getBit(_key, i % 64);
result = nlf^y16^y0^k;
c = result ? 1 : 0;
source = RRC(source, c, 4);
}
return source;
}

# 79
u8 * DEcrypt(u8 *source, u8* _key)
{
U08ET bitk[4], res;
U16ET index;
for(index=0; index<528; index++) {
bitk[0] = NLF[getBit(source,30)][getBit(source,25)][getBit(source,19)][getBit(source, 8)][getBit(source,0)];
bitk[1] = getBit(source, 15);
bitk[2] = getBit(source, 31);
bitk[3] = getBit(_key, (527-index)%64);
res = bitk[0]^bitk[1]^bitk[2]^bitk[3];
source[3] = (source[3]<<1) | (source[2]>>7);
source[2] = (source[2]<<1) | (source[1]>>7);
source[1] = (source[1]<<1) | (source[0]>>7);
source[0] = (source[0]<<1) | (res);
}
return source;
}

# 105
u8 getBit( u8* source, u16 n)
{
U08ET byidx, btidx;

byidx = n/8;
btidx = n%8;

if( 0 == (source[byidx] & (1<<btidx)) ) {
return 0;
}
else{
return 1;
}
}

# 129
u8 * RRC(u8 *source, u8 c, u8 n)
{
u8 temp;
for (; n>0; n--) {
temp = source[n - 1];
if (c) {
source[n - 1] = (source[n - 1] >> 1) | 0x80;
}
else {
source[n - 1] = (source[n - 1] >> 1) & 0x7f;
}
c = (temp & 0x01) ? 1 : 0;
}
return source;
}

# 154
u8 * RLC(u8 *source, u8 c, u8 n) {
u8 temp, i;
for (i = 0; i<n; i++) {
temp = source[i];
if (c != 0) {
source[i] = (source[i] << 1) | 0x01;
} else {
source[i] = (source[i] << 1) & 0xfe;
}
c = (temp & 0x80) ? 1 : 0;
}
return source;
}

